import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class CorrelationsServiceService {

  constructor() { }

  getData(): number[] [] {
    return [
      [501, 387, 329, 422, 273, 495, 308, 434, 275, 487, 319, 478, 220, 366, 498, 240, 377, 267, 412, 329, 214, 380, 445, 395, 635],
      [205, 448, 292, 429, 391, 463, 348, 251, 399, 452, 217, 489, 320, 488, 233, 359, 415, 385, 278, 218, 416, 431, 230, 635, 452],
      [393, 488, 311, 211, 465, 455, 303, 352, 494, 271, 465, 418, 349, 375, 458, 295, 491, 309, 388, 447, 275, 388, 635, 458, 351],
      [387, 255, 471, 405, 213, 383, 495, 324, 225, 372, 216, 491, 446, 416, 444, 318, 454, 458, 243, 376, 265, 635, 268, 232, 434],
      [469, 376, 322, 299, 262, 370, 415, 464, 436, 265, 423, 224, 336, 209, 455, 466, 307, 462, 293, 233, 635, 399, 458, 397, 295],
      [403, 499, 406, 487, 409, 289, 258, 352, 413, 471, 253, 222, 303, 311, 340, 498, 231, 490, 418, 635, 438, 318, 452, 496, 376],
      [260, 493, 448, 405, 455, 477, 337, 212, 238, 244, 361, 237, 226, 286, 381, 456, 243, 475, 635, 242, 355, 399, 458, 397, 295],
      [317, 441, 420, 458, 482, 234, 387, 269, 467, 468, 497, 229, 329, 302, 371, 257, 223, 635, 397, 408, 332, 368, 244, 407, 460],
      [289, 306, 232, 480, 242, 414, 240, 213, 455, 388, 446, 459, 301, 352, 229, 243, 635, 292, 496, 235, 238, 467, 321, 335, 366],
      [281, 270, 429, 214, 296, 292, 230, 482, 428, 250, 447, 332, 343, 419, 279, 635, 331, 212, 221, 430, 323, 386, 221, 302, 281],
      [235, 473, 217, 238, 426, 215, 487, 292, 405, 493, 446, 394, 431, 418, 635, 431, 442, 287, 219, 232, 352, 280, 357, 399, 373],
      [383, 244, 246, 322, 324, 414, 324, 418, 346, 437, 468, 228, 439, 635, 434, 397, 355, 423, 459, 407, 221, 342, 490, 356, 405],
      [470, 361, 336, 392, 249, 267, 414, 278, 265, 235, 429, 447, 635, 340, 236, 270, 214, 380, 445, 395, 469, 418, 297, 258, 233],
      [495, 361, 401, 474, 340, 407, 414, 101, 229, 493, 277, 635, 278, 238, 448, 427, 416, 431, 230, 494, 324, 415, 474, 328, 290],
      [452, 320, 239, 343, 420, 371, 370, 438, 318, 452, 635, 376, 481, 329, 402, 479, 322, 315, 222, 286, 292, 361, 424, 453, 321],
      [464, 383, 344, 304, 461, 305, 332, 294, 412, 635, 469, 401, 426, 286, 495, 464, 327, 481, 487, 447, 442, 286, 402, 243, 472],
      [446, 217, 254, 487, 227, 397, 493, 426, 635, 275, 388, 246, 458, 412, 497, 314, 394, 287, 488, 366, 265, 377, 268, 232, 434],
      [265, 404, 365, 481, 311, 362, 415, 635, 265, 377, 268, 232, 434, 310, 493, 346, 451, 236, 474, 294, 467, 275, 388, 246, 458],
      [229, 319, 444, 223, 254, 297, 635, 355, 399, 458, 397, 295, 433, 344, 496, 454, 421, 272, 277, 469, 330, 233, 359, 289, 329],
      [470, 361, 336, 392, 249, 635, 414, 278, 265, 235, 429, 447, 407, 340, 236, 270, 214, 380, 445, 395, 404, 380, 343, 399, 461],
      [495, 361, 401, 474, 635, 407, 414, 401, 229, 493, 277, 367, 278, 238, 448, 427, 416, 431, 230, 494, 336, 481, 222, 363, 397],
      [452, 320, 239, 635, 420, 371, 370, 438, 318, 452, 496, 376, 481, 329, 402, 479, 322, 315, 222, 286, 346, 457, 266, 452, 406],
      [464, 345, 635, 304, 461, 305, 332, 294, 412, 324, 469, 401, 426, 286, 495, 464, 327, 481, 487, 447, 307, 239, 452, 439, 477],
      [245, 635, 254, 487, 227, 397, 493, 426, 467, 275, 388, 246, 458, 412, 497, 314, 394, 287, 488, 366, 336, 481, 222, 363, 397],
      [635, 404, 365, 481, 311, 362, 415, 405, 265, 377, 268, 232, 434, 310, 493, 346, 451, 236, 474, 294, 292, 361, 424, 453, 321],
    ];
  }

  calculateAverage(): number {
    const data = this.getData();
    const totalElements = data.length * data[0].length;

    const sum = data.reduce((accRow, row) => accRow + row.reduce((accCell, cell) => accCell + cell, 0), 0);

    return sum / totalElements;
  }

  findMaxValue(): number {
    const data = this.getData();
    let maxValue = Number.MIN_SAFE_INTEGER;

    for (const row of data) {
      for (const cell of row) {
        maxValue = Math.max(maxValue, cell);
      }
    }

    return maxValue;
  }

  findMinValue(): number {
    const data = this.getData();
    let minValue = Number.MAX_SAFE_INTEGER;

    for (const row of data) {
      for (const cell of row) {
        minValue = Math.min(minValue, cell);
      }
    }

    return minValue;
  }


}
